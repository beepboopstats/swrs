---
title: ""
format: 
  html: 
    number-sections: true
editor_options: 
  chunk_output_type: console
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = F)
knitr::opts_chunk$set(message = F)
## For more inspiration on customizing the html output, refer to the following:
# https://bookdown.org/yihui/rmarkdown/html-document.html#table-of-contents

```


<!-- Housekeeping -->

```{r housekeeping, include=FALSE}

# Load the libraries
library(dplyr)
googlesheets4::gs4_deauth()

for (i in list.files(here::here("R"), full.names = TRUE)) source(i)

# set path to the behavioral data within your repository 
link = "https://docs.google.com/spreadsheets/d/167rT3pKlFvfqzlXSNDd31ad4pZSzWwvz4mtAnq2I0z8/edit?gid=0#gid=0"

dttm <- pretty_datetime(Sys.time())

```

Last updated on `r dttm`

<!-- # Read data from googledrive -->

```{r get_data}
dat <- googlesheets4::read_sheet(
  link,
  sheet = 1,
  skip = 1,
  col_types = "c"
) |> 
  janitor::clean_names()
```

<!-- Check if formatting of googlesheet is okay. -->

<!-- # Tidy data -->

```{r tidy_data}
tdat <- dat |> 
  select(
    date,
    observer = observer_initial,
    col_id,
    # time = foraging_time,
    matches("^in"),
    matches("^out")
  ) |> 
  mutate(
    date = lubridate::mdy(date),
    # time = lubridate::parse_date_time(time, "H:M:S p") |> 
    #   hms::as_hms(),
    across(
      matches("^in|^out"),
      ~ as.integer(.x)
    )
  )
```

<!-- # Summarize  -->

```{r}
sdat <- tdat |> 
  group_by(date, observer, col_id) |> 
  tidyr::pivot_longer(
    cols = matches("^in|^out"),
    names_to = "inout",
    values_to = "rate"
  ) |> 
  ungroup() |> 
  mutate(
    inout = if_else(stringr::str_detect(inout, "^in"), "in", "out")
  ) |> 
  group_by(
    date, observer, col_id, inout
  ) |> 
  reframe(
    rate = sum(rate, na.rm = TRUE)
  ) |> 
  arrange(
    date, observer, col_id
  ) |> 
  tidyr::pivot_wider(
    names_from = inout,
    values_from = rate,
  )
```

# Outstanding errors

## Error: Dates

The date of observation entered is an implausible date.

> ASSUMPTION: Observation started on 14 Aug 2025.

```{r}
foo <- sdat |>
# sdat |>
  # glimpse()
  filter(
    date > Sys.Date() |
      date < lubridate::ymd("2025-08-14")
  )

if(nrow(foo) > 0) {
  foo |> 
    reactable::reactable(
      groupBy = c("observer"),
      columns = list(
        date = reactable::colDef(minWidth = 150, name = "date (ymd)")
      )
    )
} else {
  cat("None found! Good job people.")
}
```

# Vizualize data by colony

::: {.callout-note collapse=true}

## Absolute total foraging rates by colony-date.

```{r fig.width=12, fig.height=6}
library(ggplot2)

which_colonies <- sdat$col_id |> unique()
rel_colonies <- as.integer(which_colonies) |> na.omit() |> sort()

cat(
  "Removing the following colonies from display: ", 
  setdiff(which_colonies, rel_colonies) |> paste(collapse = ", ")
)

# split into 4 groups
n_cols <- ceiling(length(rel_colonies) / 4)
col_groups <- list(
  rel_colonies[1:n_cols],
  rel_colonies[(n_cols+1):(n_cols*2)],
  rel_colonies[(2*n_cols+1):(n_cols*3)],
  rel_colonies[(3*n_cols+1):length(rel_colonies)]
)
dat_plot <- sdat |> 
  transmute(
    col_id,
    date,
    observer,
    total_rate = `in` + out
  ) |> 
  filter(
    col_id %in% rel_colonies
  ) |> 
  mutate(
    col_group = case_when(
      col_id %in% col_groups[[1]] ~ "Random set 1",
      col_id %in% col_groups[[2]] ~ "Random set 2",
      col_id %in% col_groups[[3]] ~ "Random set 3",
      .default = "Random set 4"
    ),
    col_id = factor(col_id, levels = rev(rel_colonies))
  )

dat_plot |> 
  ggplot(
    aes(
      x = as.factor(date),
      y = col_id,
      fill = total_rate
    )
  ) +
  facet_wrap(~ col_group, scales = "free_y", ncol = 4) +
  geom_tile(color = "black") +
  theme_bw(15) +
  viridis::scale_fill_viridis(direction = -1) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5),
    axis.title.x = element_blank(),
    panel.grid.major.y = element_blank()
  )

```

:::



```{r}
dat_plot_all <- dat_plot |>
  tidyr::expand(
    col_id, 
    date
  ) |>
  left_join(
    dat_plot
  ) |> 
  group_by(
    col_id
  ) |> 
  tidyr::fill(
    col_group, .direction = "downup"
  ) |> 
  ungroup() |> 
  group_by(
    col_id, date
  ) |> 
  reframe(
    observer = max(observer, na.rm = TRUE),
    total_rate = max(total_rate, na.rm = TRUE),
    col_group = max(col_group, na.rm = TRUE)
  ) |> 
  mutate(
    across(
      everything(),
      ~ if_else(
        is.infinite(.x),
        NA,
        .x
      )
    )
  ) |> 
  mutate(
    rate = case_when(
      total_rate == 0 ~ "No",
      total_rate > 0 ~ "Yes",
      .default = "Missing"
    ) |> 
      factor(
        levels = c(
          "Yes",
          "No",
          "Missing"
        )
      )
  )

```



## Plot: Missingness in data

```{r fig.width=12, fig.height=6}
dat_plot_all |> 
  ggplot(
    aes(
      x = as.factor(date),
      y = col_id,
      fill = rate
    )
  ) +
  facet_wrap(~ col_group, scales = "free_y", ncol = 4) +
  geom_tile(color = "black") +
  theme_bw(15) +
  scale_fill_manual(
    values = c("orange", "maroon", "white"),
    "Foraging (in + out > 0) observed?"
  ) +
  # viridis::scale_fill_viridis(direction = -1) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=0.5),
    axis.title.x = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "top"
  )
```


## Table: Missingness in data

```{r}
summ <- dat_plot_all |> 
  group_by(col_id, rate) |> 
  glimpse() |> 
  reframe(
    n_dates = n(),
    which_dates = paste(
      date,
      collapse = ", "
    )
  ) |> 
  arrange(
    rate,
    desc(n_dates),
    desc(col_id)
  ) |> 
  select(
    - which_dates
  ) |> 
  # glimpse()
  tidyr::pivot_wider(
    names_from = rate,
    names_prefix = "Foraging_",
    values_from = n_dates
  ) |> 
  glimpse()

orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ffb54d"))(x), maxColorValue = 255)

summ |> 
  mutate(
    col_group = case_when(
      Foraging_Yes == 7 ~ "Observed, Foraging, all 7 days",
      Foraging_Yes >= 5 ~  "Observed, Foraging, 5 or 6 days",
      Foraging_Yes >= 1 ~  "Observed, Foraging, at least one day",
      Foraging_No == 7 ~  "Observed, Not foraging, all 7 days",
      .default = "Observed, Not foraging, OTHERS"
    ) |> 
      factor(
        levels = c(
          "Observed, Foraging, all 7 days",
          "Observed, Foraging, 5 or 6 days",
          "Observed, Foraging, at least one day",
          "Observed, Not foraging, all 7 days",
          "Observed, Not foraging, OTHERS"
        )
      ),
    .before = 1
  ) |> 
  arrange(
    col_group,
    desc(Foraging_Yes),
    desc(Foraging_No)
  ) |> 
  reactable::reactable(
    groupBy = c("col_group"),
    sortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    height = 500,
    columns = list(
      col_group = reactable::colDef(minWidth = 230),
      col_id = reactable::colDef(minWidth = 50)
    )
  )
  
```



# View summarized dataset

> Grouped by date and observer, total in/out rates.

```{r}
sdat |> 
  reactable::reactable(
    sortable = TRUE,
    filterable = TRUE,
    resizable = TRUE,
    height = 500,
    columns = list(
      date = reactable::colDef(minWidth = 150, name = "date (ymd)")
    )
  )
```

